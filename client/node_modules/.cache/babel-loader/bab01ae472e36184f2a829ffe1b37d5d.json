{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport users from './userSlice';\nconsole.log(users);\nexport const booksSlice = createSlice({\n  name: 'booksSlice',\n  initialState: {\n    books: [],\n    currentPage: 1,\n    limit: 3,\n    bookCount: 0,\n    pageCount: 0,\n    comments: [],\n    averageRating: 0\n  },\n  reducers: {\n    updateBooks: (state, action) => {\n      state.books = action.payload;\n    },\n    updateBookCount: (state, action) => {\n      const pageCount = Math.ceil(action.payload / state.limit);\n      state.bookCount = action.payload;\n      state.pageCount = pageCount;\n    },\n    updateCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    updateComments: (state, action) => {\n      state.comments = action.payload;\n    },\n    addComment: (state, action) => {\n      state.comments.push(action.payload);\n    },\n    updateAverageRating: (state, action) => {\n      state.averageRating = action.payload;\n    },\n    updateRatings: (state, action) => {\n      state.ratings = action.payload;\n    }\n  }\n});\nexport const getBooksThunk = (currentPage, limit, token) => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/books/?page=${currentPage || 1}&limit=${limit || 3}`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(updateBooks(res.data));\n    }).catch(error => alert('Error getting books'));\n  };\n};\nexport const getBookCountThunk = token => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/books/bookcount`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(res => dispatch(updateBookCount(res.data))).catch(error => alert('Error update count'));\n  };\n};\nexport const getCommentsThunk = (book_id, token) => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/books/comments?book_id=${book_id}`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(updateComments(res.data));\n    }).catch(error => alert('Error send comments data '));\n  };\n};\nexport const sendCommentThunk = (book_id, mail, text, token) => {\n  return dispatch => {\n    axios.post(`http://localhost:5000/books/comments`, {\n      book_id,\n      mail,\n      text\n    }, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(res => dispatch(addComment({\n      book_id,\n      mail,\n      text\n    }))).catch(error => alert('Error send comments data '));\n  };\n};\nexport const sendRatingThunk = (book_id, rating, token) => {\n  return dispatch => {\n    axios.post(`http://localhost:5000/books/rating`, {\n      book_id,\n      rating\n    }, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(newAverageRating => dispatch(updateAverageRating(newAverageRating))).catch(error => alert('Error send Rating '));\n  };\n};\nexport const getRatingsThunk = (book_id, token) => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/books/rating?book_id=${book_id}`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(updateRatings(res.data));\n    }).catch(error => alert('Error send comments data '));\n  };\n};\nexport const {\n  updateBooks,\n  updateBookCount,\n  updateCurrentPage,\n  addComment,\n  updateComments,\n  addRating,\n  updateRatings\n} = booksSlice.actions;\nexport default booksSlice.reducer;","map":{"version":3,"sources":["C:/Users/Arsen/Documents/Myproject/client/src/redux/booksSlice.js"],"names":["createSlice","axios","users","console","log","booksSlice","name","initialState","books","currentPage","limit","bookCount","pageCount","comments","averageRating","reducers","updateBooks","state","action","payload","updateBookCount","Math","ceil","updateCurrentPage","updateComments","addComment","push","updateAverageRating","updateRatings","ratings","getBooksThunk","token","dispatch","get","headers","authorization","then","res","data","catch","error","alert","getBookCountThunk","getCommentsThunk","book_id","sendCommentThunk","mail","text","post","sendRatingThunk","rating","newAverageRating","getRatingsThunk","addRating","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\nimport users from './userSlice'\r\nconsole.log(users)\r\nexport const booksSlice = createSlice({\r\n    name: 'booksSlice',\r\n    initialState: {\r\n        books: [],\r\n        currentPage: 1,\r\n        limit: 3,\r\n        bookCount: 0,\r\n        pageCount: 0,\r\n        comments: [],\r\n        averageRating: 0\r\n    },\r\n    reducers: {\r\n        updateBooks: (state, action) => {\r\n            state.books = action.payload\r\n        },\r\n        updateBookCount: (state, action) => {\r\n            const pageCount = Math.ceil(action.payload / state.limit)\r\n            state.bookCount = action.payload\r\n            state.pageCount = pageCount\r\n        },\r\n        updateCurrentPage: (state, action) => {\r\n            state.currentPage = action.payload\r\n        },\r\n        updateComments: (state, action) =>{\r\n            state.comments = action.payload\r\n        },\r\n        addComment: (state, action) => {\r\n            state.comments.push(action.payload)\r\n        },\r\n        updateAverageRating: (state, action) => {\r\n            state.averageRating = action.payload\r\n        },\r\n        updateRatings: (state, action) => {\r\n            state.ratings = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const getBooksThunk = (currentPage, limit, token) => {\r\n     \r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/books/?page=${currentPage || 1}&limit=${limit || 3}`, \r\n                {headers:{authorization: `Bearer ${token}`}})\r\n            .then((res) => {\r\n                dispatch(updateBooks(res.data))\r\n            })\r\n            .catch(error => alert('Error getting books'))\r\n    }\r\n}\r\n\r\nexport const getBookCountThunk = (token) => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/books/bookcount`,{headers:{authorization: `Bearer ${token}`}} )\r\n            .then((res) => dispatch(updateBookCount(res.data)))\r\n            .catch(error => alert('Error update count'))\r\n    }\r\n}\r\n\r\n\r\nexport const getCommentsThunk = (book_id, token) => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/books/comments?book_id=${book_id}`,{headers:{authorization: `Bearer ${token}`}})\r\n        .then((res) => {\r\n            dispatch(updateComments(res.data))\r\n        })\r\n        .catch(error => alert('Error send comments data '))\r\n    }\r\n}\r\nexport const sendCommentThunk = (book_id, mail, text, token) => {\r\n    return (dispatch) => {\r\n        axios.post(`http://localhost:5000/books/comments`, {book_id, mail, text},{headers:{authorization: `Bearer ${token}`}})\r\n        .then((res) => dispatch(addComment({book_id, mail, text})))\r\n        .catch(error => alert('Error send comments data '))\r\n    }\r\n}\r\nexport const sendRatingThunk = (book_id, rating, token) => {\r\n    return (dispatch) => {\r\n        axios.post(`http://localhost:5000/books/rating`, {book_id, rating}, {headers:{authorization: `Bearer ${token}`}})\r\n        .then((newAverageRating) => dispatch(updateAverageRating(newAverageRating)))\r\n        .catch(error => alert('Error send Rating '))\r\n    }\r\n}\r\nexport const getRatingsThunk = (book_id, token) => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/books/rating?book_id=${book_id}`,{headers:{authorization: `Bearer ${token}`}})\r\n        .then((res) => {\r\n            dispatch(updateRatings(res.data))\r\n        })\r\n        .catch(error => alert('Error send comments data '))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const { updateBooks, updateBookCount, updateCurrentPage, addComment, updateComments ,addRating,updateRatings} = booksSlice.actions\r\nexport default booksSlice.reducer"]},"metadata":{},"sourceType":"module"}