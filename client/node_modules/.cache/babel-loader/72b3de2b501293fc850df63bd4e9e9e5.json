{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const booksSlice = createSlice({\n  name: 'booksSlice',\n  initialState: {\n    books: [],\n    currentPage: 1,\n    limit: 3,\n    bookCount: 0,\n    pageCount: 0,\n    comments: []\n  },\n  reducers: {\n    updateBooks: (state, action) => {\n      state.books = action.payload;\n    },\n    updateBookCount: (state, action) => {\n      const pageCount = Math.ceil(action.payload / state.limit);\n      state.bookCount = action.payload;\n      state.pageCount = pageCount;\n    },\n    updateCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    }\n  }\n});\nexport const getBooksThunk = (currentPage, limit) => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/api/auth/books?page=${currentPage || 1}&limit=${limit || 3}`).then(res => dispatch(updateBooks(res.data))).catch(error => alert('Error getting books'));\n  };\n};\nexport const getBookCountThunk = () => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/api/auth/bookcount`).then(res => dispatch(updateBookCount(res.data))).catch(error => alert('Error update count'));\n  };\n};\nexport const getBookComments = () => {\n  return dispatch => {\n    axios.post(`http://localhost:5000/api/auth/books/comments`).then(res => dispatch(res.data)).catch(error => alert('Error send comments data '));\n  };\n};\nexport const {\n  updateBooks,\n  updateBookCount,\n  updateCurrentPage\n} = booksSlice.actions;\nexport default booksSlice.reducer;","map":{"version":3,"sources":["C:/Users/Arsen/Documents/Myproject/client/src/redux/booksSlice.js"],"names":["createSlice","axios","booksSlice","name","initialState","books","currentPage","limit","bookCount","pageCount","comments","reducers","updateBooks","state","action","payload","updateBookCount","Math","ceil","updateCurrentPage","getBooksThunk","dispatch","get","then","res","data","catch","error","alert","getBookCountThunk","getBookComments","post","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAGF,WAAW,CAAC;AAClCG,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,WAAW,EAAE,CAFH;AAGVC,IAAAA,KAAK,EAAE,CAHG;AAIVC,IAAAA,SAAS,EAAE,CAJD;AAKVC,IAAAA,SAAS,EAAE,CALD;AAMVC,IAAAA,QAAQ,EAAE;AANA,GAFoB;AAUlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH,KAHK;AAINC,IAAAA,eAAe,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAML,SAAS,GAAGQ,IAAI,CAACC,IAAL,CAAUJ,MAAM,CAACC,OAAP,GAAiBF,KAAK,CAACN,KAAjC,CAAlB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACC,OAAzB;AACAF,MAAAA,KAAK,CAACJ,SAAN,GAAkBA,SAAlB;AACH,KARK;AASNU,IAAAA,iBAAiB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACC,OAA3B;AACH;AAXK;AAVwB,CAAD,CAA9B;AAyBP,OAAO,MAAMK,aAAa,GAAG,CAACd,WAAD,EAAcC,KAAd,KAAwB;AACjD,SAAQc,QAAD,IAAc;AACjBpB,IAAAA,KAAK,CAACqB,GAAN,CAAW,6CAA4ChB,WAAW,IAAI,CAAE,UAASC,KAAK,IAAI,CAAE,EAA5F,EACKgB,IADL,CACWC,GAAD,IAASH,QAAQ,CAACT,WAAW,CAACY,GAAG,CAACC,IAAL,CAAZ,CAD3B,EAEKC,KAFL,CAEWC,KAAK,IAAIC,KAAK,CAAC,qBAAD,CAFzB;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnC,SAAQR,QAAD,IAAc;AACjBpB,IAAAA,KAAK,CAACqB,GAAN,CAAW,0CAAX,EACKC,IADL,CACWC,GAAD,IAASH,QAAQ,CAACL,eAAe,CAACQ,GAAG,CAACC,IAAL,CAAhB,CAD3B,EAEKC,KAFL,CAEWC,KAAK,IAAIC,KAAK,CAAC,oBAAD,CAFzB;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAME,eAAe,GAAG,MAAM;AACjC,SAAQT,QAAD,IAAc;AACjBpB,IAAAA,KAAK,CAAC8B,IAAN,CAAY,+CAAZ,EACCR,IADD,CACOC,GAAD,IAASH,QAAQ,CAAEG,GAAG,CAACC,IAAN,CADvB,EAECC,KAFD,CAEOC,KAAK,IAAIC,KAAK,CAAC,2BAAD,CAFrB;AAGH,GAJD;AAKH,CANM;AAOP,OAAO,MAAM;AAAEhB,EAAAA,WAAF;AAAeI,EAAAA,eAAf;AAAgCG,EAAAA;AAAhC,IAAsDjB,UAAU,CAAC8B,OAAvE;AACP,eAAe9B,UAAU,CAAC+B,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nexport const booksSlice = createSlice({\r\n    name: 'booksSlice',\r\n    initialState: {\r\n        books: [],\r\n        currentPage: 1,\r\n        limit: 3,\r\n        bookCount: 0,\r\n        pageCount: 0,\r\n        comments: []\r\n    },\r\n    reducers: {\r\n        updateBooks: (state, action) => {\r\n            state.books = action.payload\r\n        },\r\n        updateBookCount: (state, action) => {\r\n            const pageCount = Math.ceil(action.payload / state.limit)\r\n            state.bookCount = action.payload\r\n            state.pageCount = pageCount\r\n        },\r\n        updateCurrentPage: (state, action) => {\r\n            state.currentPage = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const getBooksThunk = (currentPage, limit) => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/api/auth/books?page=${currentPage || 1}&limit=${limit || 3}`)\r\n            .then((res) => dispatch(updateBooks(res.data)))\r\n            .catch(error => alert('Error getting books'))\r\n    }\r\n}\r\n\r\nexport const getBookCountThunk = () => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/api/auth/bookcount`)\r\n            .then((res) => dispatch(updateBookCount(res.data)))\r\n            .catch(error => alert('Error update count'))\r\n    }\r\n}\r\n\r\nexport const getBookComments = () => {\r\n    return (dispatch) => {\r\n        axios.post(`http://localhost:5000/api/auth/books/comments`)\r\n        .then((res) => dispatch((res.data)))\r\n        .catch(error => alert('Error send comments data '))\r\n    }\r\n}\r\nexport const { updateBooks, updateBookCount, updateCurrentPage } = booksSlice.actions\r\nexport default booksSlice.reducer"]},"metadata":{},"sourceType":"module"}