{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport users from './userSlice';\nconsole.log(users);\nexport const booksSlice = createSlice({\n  name: 'booksSlice',\n  initialState: {\n    books: [],\n    currentPage: 1,\n    limit: 3,\n    bookCount: 0,\n    pageCount: 0,\n    comments: []\n  },\n  reducers: {\n    updateBooks: (state, action) => {\n      state.books = action.payload;\n    },\n    updateBookCount: (state, action) => {\n      const pageCount = Math.ceil(action.payload / state.limit);\n      state.bookCount = action.payload;\n      state.pageCount = pageCount;\n    },\n    updateCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    updateComments: (state, action) => {\n      state.comments = action.payload;\n    },\n    addComment: (state, action) => {\n      state.comments.push(action.payload);\n    }\n  }\n});\nexport const getBooksThunk = (currentPage, limit) => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/books?page=${currentPage || 1}&limit=${limit || 3}`) // {headers:{authorization: `Bearer ${token}`}})\n    .then(res => {\n      dispatch(updateBooks(res.data));\n    }).catch(error => alert('Error getting books'));\n  };\n};\nexport const getBookCountThunk = () => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/bookcount`).then(res => dispatch(updateBookCount(res.data))).catch(error => alert('Error update count'));\n  };\n};\nexport const getCommentsThunk = book_id => {\n  return dispatch => {\n    axios.get(`http://localhost:5000/books/comments?book_id=${book_id}`).then(res => {\n      dispatch(updateComments(res.data));\n    }).catch(error => alert('Error send comments data '));\n  };\n};\nexport const sendCommentThunk = (book_id, mail, text) => {\n  return dispatch => {\n    axios.post(`http://localhost:5000/books/comments`, {\n      book_id,\n      mail,\n      text\n    }).then(res => dispatch(addComment({\n      book_id,\n      mail,\n      text\n    }))).catch(error => alert('Error send comments data '));\n  };\n};\nexport const {\n  updateBooks,\n  updateBookCount,\n  updateCurrentPage,\n  addComment,\n  updateComments\n} = booksSlice.actions;\nexport default booksSlice.reducer;","map":{"version":3,"sources":["C:/Users/Arsen/Documents/Myproject/client/src/redux/booksSlice.js"],"names":["createSlice","axios","users","console","log","booksSlice","name","initialState","books","currentPage","limit","bookCount","pageCount","comments","reducers","updateBooks","state","action","payload","updateBookCount","Math","ceil","updateCurrentPage","updateComments","addComment","push","getBooksThunk","dispatch","get","then","res","data","catch","error","alert","getBookCountThunk","getCommentsThunk","book_id","sendCommentThunk","mail","text","post","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,OAAO,MAAMG,UAAU,GAAGL,WAAW,CAAC;AAClCM,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,WAAW,EAAE,CAFH;AAGVC,IAAAA,KAAK,EAAE,CAHG;AAIVC,IAAAA,SAAS,EAAE,CAJD;AAKVC,IAAAA,SAAS,EAAE,CALD;AAMVC,IAAAA,QAAQ,EAAE;AANA,GAFoB;AAUlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH,KAHK;AAINC,IAAAA,eAAe,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAML,SAAS,GAAGQ,IAAI,CAACC,IAAL,CAAUJ,MAAM,CAACC,OAAP,GAAiBF,KAAK,CAACN,KAAjC,CAAlB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACC,OAAzB;AACAF,MAAAA,KAAK,CAACJ,SAAN,GAAkBA,SAAlB;AACH,KARK;AASNU,IAAAA,iBAAiB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACC,OAA3B;AACH,KAXK;AAYNK,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAkB;AAC9BD,MAAAA,KAAK,CAACH,QAAN,GAAiBI,MAAM,CAACC,OAAxB;AACH,KAdK;AAeNM,IAAAA,UAAU,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACH,QAAN,CAAeY,IAAf,CAAoBR,MAAM,CAACC,OAA3B;AACH;AAjBK;AAVwB,CAAD,CAA9B;AA+BP,OAAO,MAAMQ,aAAa,GAAG,CAACjB,WAAD,EAAcC,KAAd,KAAwB;AAEjD,SAAQiB,QAAD,IAAc;AACjB1B,IAAAA,KAAK,CAAC2B,GAAN,CAAW,oCAAmCnB,WAAW,IAAI,CAAE,UAASC,KAAK,IAAI,CAAE,EAAnF,EACQ;AADR,KAEKmB,IAFL,CAEWC,GAAD,IAAS;AACXH,MAAAA,QAAQ,CAACZ,WAAW,CAACe,GAAG,CAACC,IAAL,CAAZ,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,KAAK,IAAIC,KAAK,CAAC,qBAAD,CALzB;AAMH,GAPD;AAQH,CAVM;AAYP,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnC,SAAQR,QAAD,IAAc;AACjB1B,IAAAA,KAAK,CAAC2B,GAAN,CAAW,iCAAX,EACKC,IADL,CACWC,GAAD,IAASH,QAAQ,CAACR,eAAe,CAACW,GAAG,CAACC,IAAL,CAAhB,CAD3B,EAEKC,KAFL,CAEWC,KAAK,IAAIC,KAAK,CAAC,oBAAD,CAFzB;AAGH,GAJD;AAKH,CANM;AASP,OAAO,MAAME,gBAAgB,GAAIC,OAAD,IAAa;AACzC,SAAQV,QAAD,IAAc;AACjB1B,IAAAA,KAAK,CAAC2B,GAAN,CAAW,gDAA+CS,OAAQ,EAAlE,EACCR,IADD,CACOC,GAAD,IAAS;AACXH,MAAAA,QAAQ,CAACJ,cAAc,CAACO,GAAG,CAACC,IAAL,CAAf,CAAR;AACH,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAIC,KAAK,CAAC,2BAAD,CAJrB;AAKH,GAND;AAOH,CARM;AASP,OAAO,MAAMI,gBAAgB,GAAG,CAACD,OAAD,EAAUE,IAAV,EAAgBC,IAAhB,KAAyB;AACrD,SAAQb,QAAD,IAAc;AACjB1B,IAAAA,KAAK,CAACwC,IAAN,CAAY,sCAAZ,EAAmD;AAACJ,MAAAA,OAAD;AAAUE,MAAAA,IAAV;AAAgBC,MAAAA;AAAhB,KAAnD,EACCX,IADD,CACOC,GAAD,IAASH,QAAQ,CAACH,UAAU,CAAC;AAACa,MAAAA,OAAD;AAAUE,MAAAA,IAAV;AAAgBC,MAAAA;AAAhB,KAAD,CAAX,CADvB,EAECR,KAFD,CAEOC,KAAK,IAAIC,KAAK,CAAC,2BAAD,CAFrB;AAGH,GAJD;AAKH,CANM;AAUP,OAAO,MAAM;AAAEnB,EAAAA,WAAF;AAAeI,EAAAA,eAAf;AAAgCG,EAAAA,iBAAhC;AAAmDE,EAAAA,UAAnD;AAA+DD,EAAAA;AAA/D,IAAkFlB,UAAU,CAACqC,OAAnG;AACP,eAAerC,UAAU,CAACsC,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\nimport users from './userSlice'\r\n\r\nconsole.log(users)\r\nexport const booksSlice = createSlice({\r\n    name: 'booksSlice',\r\n    initialState: {\r\n        books: [],\r\n        currentPage: 1,\r\n        limit: 3,\r\n        bookCount: 0,\r\n        pageCount: 0,\r\n        comments: []\r\n    },\r\n    reducers: {\r\n        updateBooks: (state, action) => {\r\n            state.books = action.payload\r\n        },\r\n        updateBookCount: (state, action) => {\r\n            const pageCount = Math.ceil(action.payload / state.limit)\r\n            state.bookCount = action.payload\r\n            state.pageCount = pageCount\r\n        },\r\n        updateCurrentPage: (state, action) => {\r\n            state.currentPage = action.payload\r\n        },\r\n        updateComments: (state, action) =>{\r\n            state.comments = action.payload\r\n        },\r\n        addComment: (state, action) => {\r\n            state.comments.push(action.payload)\r\n        }\r\n    }\r\n})\r\n\r\nexport const getBooksThunk = (currentPage, limit) => {\r\n     \r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/books?page=${currentPage || 1}&limit=${limit || 3}`,) \r\n                // {headers:{authorization: `Bearer ${token}`}})\r\n            .then((res) => {\r\n                dispatch(updateBooks(res.data))\r\n            })\r\n            .catch(error => alert('Error getting books'))\r\n    }\r\n}\r\n\r\nexport const getBookCountThunk = () => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/bookcount`)\r\n            .then((res) => dispatch(updateBookCount(res.data)))\r\n            .catch(error => alert('Error update count'))\r\n    }\r\n}\r\n\r\n\r\nexport const getCommentsThunk = (book_id) => {\r\n    return (dispatch) => {\r\n        axios.get(`http://localhost:5000/books/comments?book_id=${book_id}`)\r\n        .then((res) => {\r\n            dispatch(updateComments(res.data))\r\n        })\r\n        .catch(error => alert('Error send comments data '))\r\n    }\r\n}\r\nexport const sendCommentThunk = (book_id, mail, text) => {\r\n    return (dispatch) => {\r\n        axios.post(`http://localhost:5000/books/comments`, {book_id, mail, text})\r\n        .then((res) => dispatch(addComment({book_id, mail, text})))\r\n        .catch(error => alert('Error send comments data '))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const { updateBooks, updateBookCount, updateCurrentPage, addComment, updateComments } = booksSlice.actions\r\nexport default booksSlice.reducer"]},"metadata":{},"sourceType":"module"}